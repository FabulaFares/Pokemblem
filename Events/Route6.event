#define ChapterID Route6Ch
#define GenericA UnitRoute6Wild
#define GenericB UnitRoute6Trainer
#define ClassA ClassRoute6WildA
#define ClassB ClassRoute6WildB
#define WildLvl 17 
#define TrainerL 21




EventPointerTable(ChapterID,ThisChapter)



ALIGN 4
ThisChapter:
POIN TurnBasedEvents
POIN CharacterBasedEvents
POIN LocationBasedEvents
POIN MiscBasedEvents
POIN Dunno1 Dunno2 Dunno3 Tutorial
POIN Traps1 Traps2
POIN Units1 Units1  //This unit group determines the number and position of deployment slots when there is a prep screen
POIN $0 $0 $0
POIN $0 $0 $0
POIN BeginningScene EndingScene

TurnBasedEvents:
TurnEventPlayer(0,GlobalTurnEvent,0,255)


END_MAIN

//Reinforce(BushUnitID, NumberOfEnemies, UnitGroup, GracePeriod, FrequencyInTurns)
{ ; ReinforceEntry(ChapterID)
Reinforce(0xF0, 1, ReinforcementUnits, 5, 4) 
Reinforce(0xF1, 1, ReinforcementUnits, 6, 4) 
}


CharacterBasedEvents:
CharacterEventBothWays(0,GlobalTalkEvent, 0xFF, Ephraim)
AllTrainersPostBattleTalk
END_MAIN



LocationBasedEvents:
House(0, ToSaffron, 12,5) 
House(0, ToSaffron, 13,5) 
House(0, ToRoute5, 19,13) 
END_MAIN

MiscBasedEvents:
CauseGameOverIfLordDies
AFEV 0 GlobalAfev 0
//AFEV flagID eventOffset activationFlag
//AREA flagID eventOffset [corner1x, corner1y] [corner2x, corner2y]
//AFEV 0 RefreshIfNotInDanger 0 
AREA 0 ToVermillion [10,39] [12,39] 
END_MAIN
#ifdef MultiTileMarker_Installer
{ ; MultiTileEntry(ChapterID)  
EscapeTileEntry(13,5) 
EscapeTileEntry(12,5)
EscapeTileEntry(19,13)
EscapeTileEntry(11,39)
EscapeTileTerminator ; } 
#endif 

ToVermillion:
ChapterTransition(VermillionCh, 21,0)

ToRoute5:
TutText(0x35,UndergroundPassText) // black bg 
ForcedChapterTransition(Route5Ch, 21,31)


ToSaffron:
CHECK_EVENTID SaffronArrived
BNE 0 sC s0 
CALL ClosedArea
LABEL 0 
ChapterTransition(SaffronCh, 18,34)



// Allocated 2 traps per chapter, in most cases 
// Eg. 2 skill scrolls, 2 TMs, 2 Coin traps, 2 Pokeball traps 
// Traps that do not reference ram do not have this limit 
// Eg. flowers are not obtained once, so you can spam them 
Traps1:
//CoinsTrap(29,18,ChapterID*2,450)
//CoinsTrap(57,15,(ChapterID*2)+1,600)

//CutBush(9,0)



//RockSmash(3,2)
//StrengthBoulder(4,3)

//RedPokeballTrap(16,35, ChapterID*2, SuperPotion)
//StatAccessoryTrap(17,20, (ChapterID*2), BronzeShield_BoostIndex) 
//GoldPokeballTrap(14,13, (ChapterID*2)+1, Gust) 
//SkillAccessoryTrap(17,20, (ChapterID*2)+1, VantagePlusID) 

//StatAccessoryTrap(14,2, (ChapterID*2)+1, OldWard_BoostIndex)
SkillAccessoryTrap(5,5, (ChapterID*2)+1, CertainBlowID) 
//SkillScrollTrap(18,28, ChapterID*2, StrongRiposteID)

//SpellScrollTrap(7,33, (ChapterID*2)+1, DoubleHit)

SkillAccessoryTrap(7,33, (ChapterID*2), DowngradeID)


//SkillScrollTrap(17,18, (ChapterID*2)+1, PerfectionistID) 

SignBTrap(9,33, ChapterID, 0x0) //no extra text 
SignATrap(21,15, ChapterID, 0x0) // Can use ChapterID as the flagID if only using 1 per chapter 


BerryTree(8,22,5)
BerryTree(19,5,5)

//SkillScrollTrap(42,16, ChapterID*2, PatienceID)
//SpellScrollTrap(18,9, (ChapterID*2)+1, DoubleHit)
//OpenPokeball(8,3)
//Sign(8,4, 2)

//Save(10,4)
//SaveCost(43,3) 
HealTile(17,20)

//Flower(38,9)



ENDTRAP
ALIGN 4


BeginningScene:
CALL GlobalBeginningScene
CALL LoadAndPlacePlayers 



LOAD1 0x1 EnemyUnitsA
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(2,15,21,22)) //n patch 
LOAD1 0x1 EnemyUnitsB
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(13,23,21,33)) //s patch 



AutoLevelUnits(WildLvl, True, 0x50FF) // Wilds  
 // Bushes  
LOAD1 0x1 HumanTrainers
ENUN 
AutoLevelUnits(TrainerL, True, 0xE0EF) // Trainers given visible levels 
CALL SetBushHpEvent

LABEL 0x63
NoFade
ENDA



ShopItems:
SHLI Elfire Nosferatu Divine Mend Physic PureWater Elixir
ALIGN 4

ArmoryItems:
SHLI SteelAxe SteelLance SteelBow SteelSword HandAxe Javelin
ALIGN 4

EndingScene: //Unused but must exist 
NoFade
ENDA

Dunno1:
END_MAIN
Dunno2:
END_MAIN
Dunno3:
END_MAIN
Tutorial:
END_MAIN
Traps2:
ENDTRAP
ALIGN 4

Units1: //only used for a pointless POIN at start 
UNIT Seth  0x7 0x1 0xA1     [0,0] 0b 0x0 0x0 0x0 [0x2,0x3,0x4,0x5] [0x0,0x0,0x0,0x0]
UNIT 

// Wilds - SpearowID	BellsproutID

EnemyUnitsA:
//   UnitID  			ClassID    		Comm   Level,Alleg,AutoL  Coords Spec,ItemD,Mons n/a REDAShort	 ItemWord 			AIWord 
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,1] 001b	0x0 0x01 REDA0R1 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 0xF0 BushID 0x0 Level(0, Enemy, 1)   [0,3]  0b	0x0 0x01 REDA0R3  [0x0,0x0,0x0,0x0] BushAI
UNIT 

EnemyUnitsB:
//   UnitID  			ClassID    		Comm   Level,Alleg,AutoL  Coords Spec,ItemD,Mons n/a REDAShort	 ItemWord 			AIWord 
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 0xF1 BushID 0x0 Level(0, Enemy, 1)   [0,3]  0b	0x0 0x01 REDA0R3  [0x0,0x0,0x0,0x0] BushAI
UNIT 


ReinforcementUnits:
UNIT Reinforcement0 ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackIfWithin2
UNIT 



// ChapterID is defined in each chapter.event. The { } brackets are necessary here. 
{ ; MS_ChTableEntry(ChapterID) // Modular Summon table per chapter 
// MS_TableEntry(UnitID, ClassID, LevelReq, FlagReq, PosType, MatchLvl, ResetStats, AllowDuplicates, UnitGroup)
MS_TableEntry(0xE0, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers0) 
MS_TableEntry(0xE1, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers1) 
MS_TableEntry(0xE2, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers2) 
MS_TableTerminator ; } 

{ ; TQ_ChEntry(ChapterID) // Trainer's quotes when they spot you 
SHORT R6_0xE0_BQ // 0xE0 
SHORT R6_0xE1_BQ // 0xE0 
SHORT R6_0xE2_BQ // 0xE0 

TDQ_TableTerminator

TD_ChEntry(ChapterID) // Trainer's quotes when they're defeated  
SHORT R6_0xE0_BD // 0xE0 
SHORT 600 // Gold 
SHORT R6_0xE1_BD // 0xE0 
SHORT 900 // Gold 
SHORT R6_0xE2_BD // 0xE0 
SHORT 500 // Gold 


TDQ_TableTerminator ; }

HumanTrainers:
UNIT 0xE0 picnickerID 0x0 Level(0, Enemy, 1) [11,27]  0b 0x0	0x0 0x0 [OneRangeWep,0x0,0x0,0x0] TrainerAI
UNIT 0xE1 picnickerID 0x0 Level(0, Enemy, 1) [14,18]  0b 0x0	0x1 REDA14R18 [OneRangeWep,0x0,0x0,0x0] TrainerAI
UNIT 0xE2 bug_catcherID 0x0 Level(0, Enemy, 1) [4,12]  0b 0x0	0x0 0x0 [OneRangeWep,0x0,0x0,0x0] TrainerAI

UNIT



EnemyTrainers0: // picnicker
UNIT GenericB 	PidgeottoID 0xE0 	Level(0, Enemy, 1) [9,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT GenericB 	BellsproutID 0xE0 	Level(0, Enemy, 1) [10,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT GenericB 	OddishID 0xE0 	Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT

EnemyTrainers1: // picnicker
UNIT GenericB 	BellsproutID 0xE1 	Level(0, Enemy, 1) [9,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT GenericB 	MeowthID 0xE1 	Level(0, Enemy, 1) [10,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT GenericB 	BellsproutID 0xE1 	Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT

EnemyTrainers2: // Bug catcher
UNIT GenericB 	VenonatID 0xE2 	Level(0, Enemy, 1) [9,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT GenericB 	PidgeottoID 0xE2 	Level(0, Enemy, 1) [10,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT GenericB 	VenonatID 0xE2 	Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT
	
#undef GenericA 
#undef GenericB 
#undef ClassA
#undef ClassB
#undef WildLvl
#undef TrainerL
#undef ChapterID