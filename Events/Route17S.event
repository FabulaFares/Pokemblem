#define ChapterID Route17SCh
#define GenericA UnitRoute17SWild
#define GenericB UnitCyclingRoadTrainer
#define ClassA ClassRoute17SWildA
#define ClassB ClassRoute17SWildB
#define WildLvl 31
#define TrainerL 34




EventPointerTable(ChapterID,ThisChapter)



ALIGN 4
ThisChapter: // Use this in all non-gym / non-tutorial chapters
POIN TurnBasedEvents
POIN CharacterBasedEvents
POIN LocationBasedEvents
POIN MiscBasedEvents
UnusedPointers //POIN Dunno1 Dunno2 Dunno3 Tutorial
POIN Traps1 Traps2_Empty
POIN Units1_Empty Units1_Empty  //This unit group determines the number and position of deployment slots when there is a prep screen
POIN $0 $0 $0
POIN $0 $0 $0
POIN BeginningScene EndingScene_Empty 

TurnBasedEvents:
TurnEventPlayer(0,GlobalTurnEvent,0,255)


END_MAIN



CharacterBasedEvents:
CharacterEventBothWays(0,GlobalTalkEvent, 0xFF, Ephraim)
AllTrainersPostBattleTalk
END_MAIN



LocationBasedEvents:
END_MAIN


MiscBasedEvents:
CauseGameOverIfLordDies
AFEV 0 GlobalAfev 0
//AFEV flagID eventOffset activationFlag
//AREA flagID eventOffset [corner1x, corner1y] [corner2x, corner2y]
//AFEV 0 RefreshIfNotInDanger 0 
AREA 0 ToRoute18 [8,60] [16,60] 
AREA 0 ToRoute17N_W [2,0] [7,0] 
AREA 0 ToRoute17N_E [17,0] [21,0] 
END_MAIN
#ifdef MultiTileMarker_Installer
{ ; MultiTileEntry(ChapterID) 
EscapeTileEntry(4,0) 
EscapeTileEntry(6,0) 
EscapeTileEntry(18,0) 
EscapeTileEntry(20,0) 
EscapeTileEntry(12,60) 
EscapeTileEntry(15,60) 
EscapeTileEntry(9,60) 
EscapeTileTerminator ; } 
#endif 

ToRoute17N_W:
ChapterTransition(Route17NCh, 5,57)

ToRoute17N_E:
ChapterTransition(Route17NCh, 19,57)

ToRoute18:
ChapterTransition(Route18Ch, 12,1)




// Allocated 2 traps per chapter, in most cases 
// Eg. 2 skill scrolls, 2 TMs, 2 Coin traps, 2 Pokeball traps 
// Traps that do not reference ram do not have this limit 
// Eg. flowers are not obtained once, so you can spam them 

Traps1:
//CoinsTrap(29,18,ChapterID*2,450)
//CoinsTrap(57,15,(ChapterID*2)+1,600)

//Route17N: PursuitSS, CounterMagicAcc
//Route17N: Flamethrower Carbos 
//Route16: Fly, PaddedShieldT2 


//CutBush(12,10)
//RockSmash(29,9)

//StrengthBoulder(4,3)



//RedPokeballTrap(49,9, (ChapterID*2)+1, Zinc) 
//RedPokeballTrap(34,7, (ChapterID*2), SuperPotion) 
SkillAccessoryTrap(15,23, (ChapterID*2)+1, CounterMagicID) 

//StatAccessoryTrap(14,2, (ChapterID*2)+1, OldWard_BoostIndex)
//SkillAccessoryTrap(37,14, ChapterID*2, DeathBlowID) 
//SkillScrollTrap(18,28, ChapterID*2, StrongRiposteID)

SkillScrollTrap(11,41, (ChapterID*2)+1, PursuitID) 

SignBTrap(9,3, ChapterID, 0x0) //no extra text 
SignATrap(12,56, ChapterID, 0x0) // Can use ChapterID as the flagID if only using 1 per chapter 





//SkillScrollTrap(21,9, ChapterID*2, DartingStanceID)
//SpellScrollTrap(18,9, (ChapterID*2)+1, DrillPeck)
//OpenPokeball(8,3)
//Sign(8,4, 2)

//Save(10,4)
SaveCost(13,3) 




ENDTRAP
ALIGN 4




BeginningScene:
CALL GlobalBeginningScene
CALL LoadAndPlacePlayers 
SetMaxMove


//LOAD1 0x1 EnemyUnitsA
//ENUN
//RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(40,13,45,16)) //E patch 


//AutoLevelUnits(WildLvl, True, 0x50FF) // Wilds  
 // Bushes  
LOAD1 0x1 HumanTrainers
ENUN 
AutoLevelUnits(TrainerL, True, 0xE0EF) // Trainers given visible levels 
CALL SetBushHpEvent

LABEL 0x63
NoFade
ENDA




 
HumanTrainers:
UNIT 0xE0 bikerID 0x0 Level(0, Enemy, 1) [15,50]  0b 0x0	0x0 0x0  [ThreeRangeWep,0x0,0x0,0x0] TrainerAI
UNIT 0xE1 bikerID 0x0 Level(0, Enemy, 1) [10,35]  0b 0x0	0x0 0x0  [ThreeRangeWep,0x0,0x0,0x0] TrainerAI
UNIT 0xE2 bikerID 0x0 Level(0, Enemy, 1) [20,25]  0b 0x0	0x0 0x0  [ThreeRangeWep,0x0,0x0,0x0] TrainerAI
UNIT 0xE3 bikerID 0x0 Level(0, Enemy, 1) [6,18]  0b 0x0	0x0 0x0  [ThreeRangeWep,0x0,0x0,0x0] TrainerAI
UNIT 0xE4 bikerID 0x0 Level(0, Enemy, 1) [18,7]  0b 0x0	0x0 0x0  [ThreeRangeWep,0x0,0x0,0x0] TrainerAI
UNIT

// ChapterID is defined in each chapter.event. The { } brackets are necessary here. 
{ ; MS_ChTableEntry(ChapterID) // Modular Summon table per chapter 
// MS_TableEntry(UnitID, ClassID, LevelReq, FlagReq, PosType, MatchLvl, ResetStats, AllowDuplicates, UnitGroup)
MS_TableEntry(0xE0, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers0) 
MS_TableEntry(0xE1, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers1) 
MS_TableEntry(0xE2, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers2) 
MS_TableEntry(0xE3, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers3) 
MS_TableEntry(0xE4, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers4) 
MS_TableTerminator ; } 

{ ; TQ_ChEntry(ChapterID) // Trainer's quotes when they spot you 
SHORT R17S_0xE0_BQ // 0xE0 
SHORT R17S_0xE1_BQ // 0xE0 
SHORT R17S_0xE2_BQ // 0xE0 
SHORT R17S_0xE3_BQ // 0xE0 
SHORT R17S_0xE4_BQ // 0xE0 
TDQ_TableTerminator

TD_ChEntry(ChapterID) // Trainer's quotes when they're defeated  
SHORT R17S_0xE0_BD // 0xE0 
SHORT 600 // Gold 
SHORT R17S_0xE1_BD // 0xE0 
SHORT 600 // Gold 
SHORT R17S_0xE2_BD // 0xE0 
SHORT 600 // Gold 
SHORT R17S_0xE3_BD // 0xE0 
SHORT 600 // Gold 
SHORT R17S_0xE4_BD // 0xE0 
SHORT 600 // Gold 
TDQ_TableTerminator ; }



// trainer exclusive: Koffing, Weezing, Voltorb, Electrode, Primeape, Machoke, Graveller

EnemyTrainers0: // biker
UNIT GenericB 	KoffingID 0xE0 	Level(0, Enemy, 1) [9,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT GenericB 	WeezingID 0xE0 	Level(0, Enemy, 1) [10,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
//UNIT GenericB 	KoffingID 0xE0 	Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT GenericB 	KoffingID 0xE0 	Level(0, Enemy, 1) [9,9]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT

EnemyTrainers1: // biker
UNIT GenericB 	MachokeID 	0xE1 		Level(0, Enemy, 1) [9,11]   0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT GenericB 	GravellerID 		0xE1 		Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT GenericB 	PrimeapeID 	0xE1 		Level(0, Enemy, 1) [9,9]    0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
//UNIT GenericB 	MachokeID 		0xE1 		Level(0, Enemy, 1) [11,9]   0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT

EnemyTrainers2: // biker
UNIT GenericB 	VoltorbID 		0xE2 		Level(0, Enemy, 1) [9,11]   0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT GenericB 	VoltorbID 		0xE2 		Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT GenericB 	ElectrodeID 	0xE2 		Level(0, Enemy, 1) [9,9]    0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT GenericB 	VoltorbID 		0xE2 		Level(0, Enemy, 1) [11,9]   0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT

EnemyTrainers3: // biker
UNIT GenericB 	WeezingID 		0xE3 		Level(0, Enemy, 1) [9,11]   0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT GenericB 	ElectrodeID 	0xE3 		Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT GenericB 	PrimeapeID 		0xE3 		Level(0, Enemy, 1) [9,9]    0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
//UNIT GenericB 	MachokeID 		0xE3 		Level(0, Enemy, 1) [11,9]   0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT

EnemyTrainers4: // biker
//UNIT GenericB 	MachokeID 		0xE4 		Level(0, Enemy, 1) [9,11]   0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFiveAI
//UNIT GenericB 	GravellerID 	0xE4 		Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFiveAI
UNIT GenericB 	WeezingID 		0xE4 		Level(0, Enemy, 1) [9,9]    0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFiveAI
UNIT GenericB 	GravellerID 	0xE4 		Level(0, Enemy, 1) [11,9]   0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFiveAI
UNIT GenericB 	MachokeID 		0xE4 		Level(0, Enemy, 1) [11,9]   0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFiveAI
UNIT

	
#undef GenericA 
#undef GenericB 
#undef ClassA
#undef ClassB
#undef WildLvl
#undef TrainerL
#undef ChapterID