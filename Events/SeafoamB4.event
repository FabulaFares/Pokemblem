#define ChapterID SeafoamB4Ch
#define GenericA UnitSeafoamWild
#define GenericB UnitSeafoamTrainer
#define ClassA ClassSeafoamWildA
#define ClassB ClassSeafoamWildB
#define WildLvl 50
#define TrainerL 38




EventPointerTable(ChapterID,ThisChapter)



ALIGN 4
ThisChapter:
POIN TurnBasedEvents
POIN CharacterBasedEvents
POIN LocationBasedEvents
POIN MiscBasedEvents
POIN Dunno1 Dunno2 Dunno3 Tutorial
POIN Traps1 Traps2
POIN Units1 Units1  //This unit group determines the number and position of deployment slots when there is a prep screen
POIN $0 $0 $0
POIN $0 $0 $0
POIN BeginningScene EndingScene

TurnBasedEvents:
TurnEventPlayer(0,GlobalTurnEvent,0,255)


END_MAIN

//Reinforce(BushUnitID, NumberOfEnemies, UnitGroup, GracePeriod, FrequencyInTurns)
{ ; ReinforceEntry(ChapterID)
Reinforce(0xF0, 1, ReinforcementUnitsA, 2, 4) 
Reinforce(0xF1, 1, ReinforcementUnitsB, 3, 4) 
}


CharacterBasedEvents:
CharacterEventBothWays(0,GlobalTalkEvent, 0xFF, Ephraim)
AllTrainersPostBattleTalk
END_MAIN



LocationBasedEvents:
House(0, ToSeafoamB5E, 29,5)
House(0, ToSeafoamB5W, 12,9)
House(0, ToSeafoamB3E, 31,4)
House(0, ToSeafoamB3SE, 31,16)
House(0, ToSeafoamB3W, 8,14)
END_MAIN

MiscBasedEvents:
CauseGameOverIfLordDies
AFEV 0 GlobalAfev 0
//AFEV flagID eventOffset activationFlag
//AREA flagID eventOffset [corner1x, corner1y] [corner2x, corner2y]
//AFEV 0 RefreshIfNotInDanger 0 
AREA 0 ToSeafoamB5EHole [9,18][9,18] 
AREA 0 ToSeafoamB5EHole [6,18][6,18] 
AREA 0 DropBoulderInWestHoleEvent [4,16][7,21] 
AREA 0 DropBoulderInEastHoleEvent [7,16][11,20] 
END_MAIN
#ifdef MultiTileMarker_Installer
{ ; MultiTileEntry(ChapterID) 
EscapeTileEntry(29,5) 
EscapeTileEntry(12,9) 
EscapeTileEntry(31,4) 
EscapeTileEntry(8,14) 
EscapeTileEntry(31,16) 
EscapeTileTerminator ; } 
#endif 

ToSeafoamB5E:
ChapterTransition(SeafoamB5Ch, 31,5)
ToSeafoamB5W:
ChapterTransition(SeafoamB5Ch, 15,10)

ToSeafoamB3E:
ChapterTransition(SeafoamB3Ch, 32,5)
ToSeafoamB3SE:
ChapterTransition(SeafoamB3Ch, 31,16)
ToSeafoamB3W:
ChapterTransition(SeafoamB3Ch, 8,17)

ToSeafoamB5EHole:
CALL FallInHoleEffect
ForcedChapterTransitionHole(SeafoamB5Ch, 9,17)

ToSeafoamB5WHole:
CALL FallInHoleEffect
ForcedChapterTransitionHole(SeafoamB5Ch, 8,17)

DropBoulderInWestHoleEvent: 
BoulderHoleEvent(6,18, B4_BoulderAFlag)
NoFade 
ENDA 

DropBoulderInEastHoleEvent: 
BoulderHoleEvent(9,18, B4_BoulderBFlag)
NoFade 
ENDA 

// Allocated 2 traps per chapter, in most cases 
// Eg. 2 skill scrolls, 2 TMs, 2 Coin traps, 2 Pokeball traps 
// Traps that do not reference ram do not have this limit 
// Eg. flowers are not obtained once, so you can spam them 
Traps1:
//CoinsTrap(54, 12,ChapterID*2,1080)
//CoinsTrap(57,15,(ChapterID*2)+1,600)


//CutBush(12,10)
//RockSmash(29,9)

StrengthBoulder(23,8)
StrengthBoulder(24,8) // only once dropped 

StrengthBoulder(4,17) // until dropped 
StrengthBoulder(12,16)
//StrengthBoulder(13,16) // this one caused a softlock 



Hole(6,18) // boulders should come before holes, i think ? 
Hole(9,18) 

//StatAccessoryTrap(43, 13, (ChapterID*2), EnhancedWard_BoostIndex) 
RedPokeballTrap(15,9, (ChapterID*2)+1, MaxPotion) 
//RedPokeballTrap(34,7, (ChapterID*2), SuperPotion) 
//SkillAccessoryTrap(17,20, (ChapterID*2)+1, VantagePlusID) 

//StatAccessoryTrap(14,2, (ChapterID*2)+1, OldWard_BoostIndex)
//SkillAccessoryTrap(37,14, ChapterID*2, DeathBlowID) 
//SkillScrollTrap(18,28, ChapterID*2, StrongRiposteID)

//SkillScrollTrap(27,2, (ChapterID*2)+1, ChivalryID) 

//SignBTrap(14, 8, ChapterID, 0x0) //no extra text 
//SignATrap(55,7, ChapterID, 0x0) // Can use ChapterID as the flagID if only using 1 per chapter 



//BerryTree(32,11,5)
//BerryTree(36,11,5)

//SkillScrollTrap(21,9, ChapterID*2, DartingStanceID)
//SpellScrollTrap(12, 28, (ChapterID*2)+1, HoneClaws)
//OpenPokeball(8,3)
//Sign(8,4, 2)

//Save(10,4)
//SaveCost(43,3) 



//Flower(18,10)


ENDTRAP
ALIGN 4




BeginningScene:
CALL GlobalBeginningScene
CALL LoadAndPlacePlayers 

CHECK_EVENTID B3_BoulderAFlag
BNE 0 sC s0 // if off, never spawn 
RemoveTrap(23,8)
LABEL 0 

CHECK_EVENTID B3_BoulderBFlag
BNE 1 sC s0 // if off, never spawn 
RemoveTrap(24,8)
LABEL 1

CHECK_EVENTID B4_BoulderAFlag
BEQ 2 sC s0 // if off, spawn
RemoveTrap(4,17)
LABEL 2 

CHECK_EVENTID B4_BoulderBFlag
BEQ 3 sC s0 // if off, spawn 
RemoveTrap(12,16)
LABEL 3



LOAD1 0x1 EnemyUnitsA
ENUN
RandomizeEnemyCoords(Ground, Range(0,0,5,5), Range(3,3,21,19)) 
LOAD1 0x1 EnemyUnitsB
ENUN
RandomizeEnemyCoords(Ground, Range(0,0,5,5), Range(26,3,34,19)) 


AutoLevelUnits(WildLvl, True, 0x50FF) // Wilds  
 // Bushes  
//LOAD1 0x1 HumanTrainers
ENUN 
AutoLevelUnits(TrainerL, True, 0xE0EF) // Trainers given visible levels 
CALL SetBushHpEvent


CHECK_EVENTID B3_BoulderAFlag 
BEQ 4 sC s0 
CHECK_EVENTID B3_BoulderBFlag 
BEQ 4 sC s0 
TILECHANGE 0 // change the current if both flags are on 
GOTO 5
LABEL 4 
//MOVE -1 0x101 [27,11] 
//ENUN 
//ASMC CallCommandEffect
LABEL 5 

LABEL 0x63
NoFade
ENDA

Dunno3:
AREA 0 MovePlayersToShore [25,12][28,13] 
AREA 0 MovePlayersToShore [25,14][26,14] 
AREA 0 MovePlayersToShore [19,11][24,13] 
AREA 0 MovePlayersToShore [23,8][24,10] 
END_MAIN

MovePlayersToShore:
CHECK_EVENTID B3_BoulderAFlag 
BEQ 4 sC s0 
CHECK_EVENTID B3_BoulderBFlag 
BEQ 4 sC s0 
GOTO 99 
LABEL 4 

ASMC 0x804EF21 // EndAllMenus 
ASMC 0x804E885 //ClearBG0BG1

SCOORD sB [25,15] // it will find the nearest tile to this coordinate 

CALL SendActorToNearestCoord


//ASMC 0x8019c3d   //@UpdateGameTilesGraphics
//SET_ACTIVE 0 
ForcedChapterTransition(SeafoamB5Ch, 27, 18) 

LABEL 99 
NoFade 
ENDA 


ShopItems:
SHLI Elfire Nosferatu Divine Mend Physic PureWater Elixir
ALIGN 4

ArmoryItems:
SHLI SteelAxe SteelLance SteelBow SteelSword HandAxe Javelin
ALIGN 4

EndingScene: //Unused but must exist 
NoFade
ENDA

Dunno1:
END_MAIN

Dunno2:
END_MAIN
Tutorial:
END_MAIN
Traps2:
ENDTRAP
ALIGN 4

Units1: //only used for a pointless POIN at start 
UNIT Seth  0x7 0x1 0xA1     [0,0] 0b 0x0 0x0 0x0 [0x2,0x3,0x4,0x5] [0x0,0x0,0x0,0x0]
UNIT 




EnemyUnitsA:
//   UnitID  			ClassID    		Comm   Level,Alleg,AutoL  Coords Spec,ItemD,Mons n/a REDAShort	 ItemWord 			AIWord 
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassB 0x0 Level(0, Enemy, 1)   [0,1] 001b	0x0 0x01 REDA0R1 [0x0,0x0,0x0,0x0] AttackInRangeAI
//UNIT 0xF0 BurrowID 0x0 Level(0, Enemy, 1)   [34,2]  0b	0x0 0 0  [0x0,0x0,0x0,0x0] BushAI
UNIT 

EnemyUnitsB:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassB 0x0 Level(0, Enemy, 1)   [0,1] 001b	0x0 0x01 REDA0R1 [0x0,0x0,0x0,0x0] AttackInRangeAI
//UNIT 0xF1 SuspiciousWaterID 0x0 Level(0, Enemy, 1)   [0,4]  0b	0x0 0x01 REDA0R4  [0x0,0x0,0x0,0x0] BushAI
UNIT 


ReinforcementUnitsA:
UNIT Reinforcement0 ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackIfWithin2
UNIT 
ReinforcementUnitsB:
UNIT Reinforcement0 ClassB 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackIfWithin2
UNIT 


	
#undef GenericA 
#undef GenericB 
#undef ClassA
#undef ClassB
#undef WildLvl
#undef TrainerL
#undef ChapterID