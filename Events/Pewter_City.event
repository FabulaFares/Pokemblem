#define ChapterID PewterCh
#define GenericA UnitRoute2NWild
#define GenericB UnitRoute2NTrainer
#define ClassA ClassRoute2NWildA
#define ClassB ClassRoute2NWildB
#define WildLvl 5 
#define TrainerL 7 





EventPointerTable(ChapterID,ThisChapter)



ALIGN 4
ThisChapter:
POIN TurnBasedEvents
POIN CharacterBasedEvents
POIN LocationBasedEvents
POIN MiscBasedEvents
POIN Dunno1 Dunno2 Dunno3 Tutorial
POIN Traps1 Traps2
POIN Units1 Units1  //This unit group determines the number and position of deployment slots when there is a prep screen
POIN $0 $0 $0
POIN $0 $0 $0
POIN BeginningScene EndingScene

TurnBasedEvents:
TurnEventPlayer(0,GlobalTurnEvent,0,255)
END_MAIN




CharacterBasedEvents:
CharacterEventBothWays(0,GlobalTalkEvent, 0xFF, Ephraim)
CHAR PurchasedPsyduckFlag PurchasePsyduckevent [0x0, 0xE1] 0 // NPC
TrainerPostBattleTalk(0xE0) // NPC talk again 
TrainerPostBattleTalk(0xE1) // NPC talk again 
END_MAIN

PurchasePsyduckevent:
CheckIfCaught(CaterpieID) 
BEQ 30 sC s0 
CheckIfCaught(WeedleID)
BEQ 30 sC s0 
CheckIfCaught(PikachuID)
BEQ 30 sC s0 

EVBIT_MODIFY 4 
WallText(PurchaseOddishText)
LOAD1 1 OddishUnitGroup  
ENUN 
AutoLevelUnits(6, True,  TempAlly<<8|TempAlly) // Psyduck 
SelectCharacter(TempAlly, 0, 0, 0, 0, 2000, 0, 0, 0, 0) 
SVAL sB 0x100 
BEQ 10 sC sB 
GOTO 20

LABEL 10 
UNCR(0x7fff, 1) // SelectCharacter ends MMS 
WallText(No_PurchasedOddishText)
ENUF PurchasedOddishFlag
DISA TempAlly
GOTO 63

LABEL 20
CHECK_COORDS 0x7fff
SADD sA sC s0  
SET_ACTIVE 0
WallText(Yes_PurchasedOddishText)
SADD sB sA s0  

ASMC Get7thUnitASMC
BEQ 21 sC s0 
WARP_OUT
STAL 30
UNCM(TempAlly, 0x10009) // Undeploy + escape the Oddish
GOTO 22 
LABEL 21 

MOVENEXTTO (-1) TempAlly 0x7FFe 
ENUN 
LABEL 22 
SVAL s1 TempAlly // Oddish's UnitID 
ASMC ChangeS1UnitIntoLowestUnitID
SET_ACTIVE 0x7ffe
GOTO 63 

LABEL 30 // Haven't caught the pokemon 
WallText(CatchBeforePurchaseOddishText)

LABEL 63 
NoFade
ENDA 



LocationBasedEvents:
House(BoulderbadgeObtained,EnterGym,12,16)  
House(0,OldAmberEvent,22,4)
Vendor(ShopItems,24,20)
END_MAIN

OldAmberEvent:
CHECK_EVENTID OldAmberFlag 
BNE 0 sC s0 
BottomWallText(ObtainOldAmber)
TutText(ObtainOldAmber2)
ENUT OldAmberFlag 
LABEL 0 
BottomWallText(AlreadyObtainedOldAmber)

LABEL 99 
NoFade 
ENDA 

EnterGym:
ENUF BoulderbadgeObtained 
ForcedChapterTransition(PewterGymCh, 7, 15)
NoFade 
ENDA 

MiscBasedEvents:
CauseGameOverIfLordDies
AFEV 0 GlobalAfev 0
AFEV 0 CityAfev 0
//AFEV 0 RefreshIfNotInDanger 0 
//AFEV flagID eventOffset activationFlag
//AREA flagID eventOffset [corner1x, corner1y] [corner2x, corner2y]
AREA 0 ToRoute2N [17,37] [21,37] 
AREA 0 ToRoute3W [39,19] [39,22] 
AFEV DisableTutFlag_A TutMsg1 0
AFEV DisableTutFlag_B TutMsg2 0
//AREA 0 ToPewterGym [12,16] [12,16] 
END_MAIN
#ifdef MultiTileMarker_Installer
{ ; MultiTileEntry(ChapterID) 
EscapeTileEntry(39,20) 
EscapeTileEntry(19,37) 
EscapeTileEntry(12,16) 
EscapeTileTerminator ; } 
#endif 

ToPewterGym:
ChapterTransition(PewterGymCh, 7, 15)

ToRoute2N:
ChapterTransition(Route2NCh, 10, 0)

ToRoute3W:
CHECK_EVENTID BoulderbadgeObtained
BEQ 0 rC r0 
ChapterTransition(Route3Ch, 0, 10)
LABEL 0 
CUMO [38,19]
CAM1 [38,19]
BottomWallText(NoBoulderbadgeText)
CURE 
NoFade 
ENDA 


TutMsg1: 
CHECK_EVENTID DisableTutMsgsFlag
BNE 99 sC s0 
ENUF DisableTutFlag_A
SVAL s1 ((ChapterID*2)+(HelpMsgFlagOffset<<3)) 
ASMC CheckNewFlag_ASMC 
BNE 99 sC s0 
CountPlayersInRange_ASMC(3,12,18,33) 
BEQ 99 sC s0 
ENUT DisableTutFlag_A
EVBIT_MODIFY 4
CAM1 [17,18]
CUMO [17,18]
STAL 30
CURE  
TutText(TrainerTip_Def)
SVAL s1 ((ChapterID*2)+(HelpMsgFlagOffset<<3)) 
ASMC SetNewFlag_ASMC 
LABEL 99 
NoFade 
ENDA 

TutMsg2: 
CHECK_EVENTID DisableTutMsgsFlag
BNE 99 sC s0
ENUF DisableTutFlag_B 
SVAL s1 ((ChapterID*2+1)+(HelpMsgFlagOffset<<3)) 
ASMC CheckNewFlag_ASMC 
BNE 99 sC s0 
CountPlayersInRange_ASMC(19,8,35,33) 
BEQ 99 sC s0 
ENUT DisableTutFlag_B
EVBIT_MODIFY 4
CAM1 [26,20]
CUMO [26,20]
STAL 30
CURE  
TutText(TrainerTip_Mart) 
SVAL s1 ((ChapterID*2+1)+(HelpMsgFlagOffset<<3)) 
ASMC SetNewFlag_ASMC 
LABEL 99 
NoFade 
ENDA 


// Allocated 2 traps per chapter, in most cases 
// Eg. 2 skill scrolls, 2 TMs, 2 Coin traps, 2 Pokeball traps 
// Traps that do not reference ram do not have this limit 
// Eg. flowers are not obtained once, so you can spam them 
Traps1:
//CoinsTrap(28,14,ChapterID*2,350)
//CoinsTrap(43,13,(ChapterID*2)+1,400)

CutBush(28,5)
//RockSmash(3,2)
//StrengthBoulder(4,3)
//StatAccessoryTrap(30,18, (ChapterID*2)+1, WiseGlasses_BoostIndex)

SkillAccessoryTrap(30,18, ChapterID*2, SteadyStanceID)

//GoldPokeballTrap(14,13, (ChapterID*2)+1, Gust) 

SignBTrap(36,18, ChapterID, 0x0) //no extra text 
SignATrap(18,31, ChapterID, 0x0) // Can use ChapterID as the flagID if only using 1 per chapter 

//SkillScrollTrap(15,11, ChapterID*2, AcrobatID)
//SpellScrollTrap(17,11, (ChapterID*2)+1, Ember)
//OpenPokeball(8,3)

BlankExamineTrap(8,16,PewterGymSignText)

SignTrap(16,7, PewterMuseumSignText) // Metal ? 
SignTrap(27,27, PewterFlowerSignText) // Wooden 
TutSign(17,18,ChapterID*2, TrainerTip_Def)
TutSign(26, 20,ChapterID*2+1, TrainerTip_Mart)

EnterWallTrap(14,6, PewterMuseumText) // Museum
EnterWallTrap(29,11, PewterNEHouseText) // Ne house trade 

EnterWallTrap(6,31, PewterSWHouseText) // sw coin house  
//EnterWallTrap(22,4, PewterSWHouseText) // sw coin house  


Save(16,24) // Pokecenter 


BerryTree(24,29,5)
BerryTree(30,29,5)






Flower(26,3)
Flower(28,3)
Flower(27,2)
Flower(29,2)

Flower(27,8)
Flower(25,8)
Flower(26,9)
Flower(24,9)

Flower(8,2)
Flower(6,2)
Flower(7,3)
Flower(8,4)

Flower(10,30)
Flower(11,31)
Flower(12,30)
Flower(13,31)

Flower(4,21)
Flower(6,21)
Flower(8,21)
Flower(4,23)
Flower(3,22)
Flower(5,22)
Flower(7,22)

Flower(23,28)
Flower(24,28)
Flower(25,28)
Flower(26,28)
Flower(27,28)
Flower(28,28)
Flower(29,28)
Flower(30,28)
Flower(31,28)

Flower(23,30)
Flower(24,30)
Flower(25,30)
Flower(26,30)
Flower(27,30)
Flower(28,30)
Flower(29,30)
Flower(30,30)
Flower(31,30)


ENDTRAP
ALIGN 4


BeginningScene:
CALL GlobalBeginningScene
CALL CityBeginningScene
CALL LoadAndPlacePlayers 
CHECK_EVENTID BoulderbadgeObtained
BNE 0 sC s0 
LOAD1 1 EnemyTrainersA
ENUN 
MarkTrainerAsDefeated(0xE0) 
LABEL 0 
LABEL 0x63
NoFade
ENDA



ALIGN 4
ShopItems:
BYTE StatAccessory MuscleBand_BoostIndex 
BYTE StatAccessory WiseGlasses_BoostIndex
BYTE JellyDonut 4
BYTE SkillScroll PatienceID

BYTE SpellScroll Leer SpellScroll Bite SpellScroll MudShot 
BYTE SpellScroll Ember SpellScroll Bubble  SpellScroll LeafFlurry
BYTE SpellScroll Gust SpellScroll Confusion 
//SHLI Elfire Nosferatu Divine Mend Physic PureWater Elixir
//SHLI SuperPotion
BYTE $00; ALIGN 4

ArmoryItems:
SHLI SteelAxe SteelLance SteelBow SteelSword HandAxe Javelin
ALIGN 4

EndingScene: //Unused but must exist 
NoFade
ENDA

Dunno1:
END_MAIN
Dunno2:
END_MAIN
Dunno3:
END_MAIN
Tutorial:
END_MAIN
Traps2:
ENDTRAP
ALIGN 4

Units1: //only used for a pointless POIN at start 
UNIT Seth  0x7 0x1 0xA1     [0,0] 0b 0x0 0x0 0x0 [0x2,0x3,0x4,0x5] [0x0,0x0,0x0,0x0]
UNIT 

PsyduckUnitGroup:
UNIT TempAlly OddishID 0x0 Level(0, Ally, 1) [0,0]  0b 0x0	0x1 REDA0R0 [0x0,0x0,0x0,0x0] DoNothing
UNIT

EnemyTrainersA:
UNIT 0xE0 super_nerdID 0x0 Level(5, Enemy, 1) [38,19]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] DoNothingAI
UNIT 0xE1 lassID 0x0 Level(5, Enemy, 1) [27,29]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] DoNothingAI
UNIT



ReinforcementUnits:
UNIT Reinforcement0 ClassA 0x0 Level(5, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT 

{ ; TQ_ChEntry(ChapterID) // Trainer's quotes when they spot you 
SHORT R9W_0xE0_BQ // 0xE0 
TDQ_TableTerminator

TD_ChEntry(ChapterID) // Trainer's quotes when they're defeated  
SHORT PewterCheckGymText // 0xE0 
SHORT 600 
SHORT P_lass_BD // captain after HM obtained 
SHORT 600 // Gold 
TDQ_TableTerminator ; } 


	
#undef GenericA 
#undef GenericB 
#undef ClassA
#undef ClassB
#undef WildLvl
#undef TrainerL
#undef ChapterID