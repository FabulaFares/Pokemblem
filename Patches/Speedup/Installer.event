
#ifndef PROC_CALL_ROUTINE_ARG
	#define PROC_CALL_ROUTINE_ARG(aprRoutine, aArgument) "SHORT 0x18 aArgument; POIN aprRoutine"
#endif 
//#define SpeedupFlag 0xEA 
// ProcVariableSleep calls AdjustSleepTime
	// if SpeedupFlag is on, wait 0 frames 
	// else if A is held down, wait half as many frames 
	
#define SleepVar(Min, Default) "PROC_CALL_ROUTINE_ARG(ProcVariableSleep, Min<<8|Default)" 
#define SleepVar(Default) "PROC_CALL_ROUTINE_ARG(ProcVariableSleep, Default)" 
#define SpeedVar(Min, Default) "WORD Default|(Min<<8)" 
#define SpeedVar(Default) "WORD Default" 

#define StalVar(Min, Default) "BYTE $4B $0D Default Min; POIN StalVariableSleep|1; STAL 1" 
// ASMC returns EVC_ADVANCE_YIELD but STAL returns EVC_STOP_YIELD - we need the latter, so we call STAL the next frame 
#define StalVar(Default) "BYTE $4B $0D Default 0; POIN StalVariableSleep|1; STAL 1" 


ALIGN 4 
SpeedupFlag_Link:
WORD SpeedupFlag
SpeedupRam_Link:
#ifdef POKEMBLEM 
WORD SpeedupRam
#endif 
#ifndef POKEMBLEM 
WORD 0 
#endif 

ALIGN 4 
LevelUpSpeed_Link: 
	SpeedVar(0, 15) // Vanilla is 20 default 
PoisonHpBarSpeed_Link: 
	SpeedVar(30, 60) // Vanilla is 100  
GotItemPopupSpeed_Link: 
	SpeedVar(1, 60) // Vanilla is 96 
VulneraryAnimationSpeed_Link: 
	// fastest, default 
	SpeedVar(4, 2) // Vanilla is 1x speed 
	// It's only valid to put 1, 2, 4, or 8x speed in here 
EmoticonSleepTime_Link:
	SpeedVar(10, 40) 
AiTargetCursor_Link:
	SpeedVar(30) // Vanilla does 45 


PUSH 

ORG $59ADE0 // gProc_BMXFADE 
//PROC_END // remove some 16 frame fade after each action ? // seems to glitch 
ORG $1DD24 
BYTE $1 // remove ~14 frames related to some fade after each action ? 

ORG $80E54 
callHackNew(SummonSpeedHook_1) // These three hooks are basically identical 
ORG $80FD8 
callHackNew(SummonSpeedHook_1)
ORG $8117C 
callHackNew(SummonSpeedHook_1)


// This part is entangled with skillsys strmag split 
// Need to check if it works with vanilla 
ORG $7F45C 
jumpToHack(LevelUpSpeedHook_1)
SHORT $46c0 
ORG $741D4
callHackNew(LevelUpSpeedHook_2)
SHORT $46C0 



ORG $21798 // These 3 are all identical code and can use the same hook 
callHackNew(LightRuneAnimHook_3)
ORG $21604 
callHackNew(LightRuneAnimHook_3)
ORG $2192C 
callHackNew(LightRuneAnimHook_3)

// Delay for EXP bar 
ORG $9A3720 
SleepVar(20)
ORG $9A3740 
SleepVar(20)

ORG $9A3FA4
SleepVar(70)
ORG $9A3FE4
SleepVar(30)
ORG $9A3FF4
SleepVar(30, 60)


ORG $7F47C // These two hooks are the same 
callHackNew(MapAnimLevelUp_SoundHook) // conditionally skip 13 sleep frames for some level up sfx (possibly volume reduction) related thing 
ORG $7F54C 
callHackNew(MapAnimLevelUp_SoundHook) // conditionally skip 13 sleep frames for some level up sfx (possibly volume reduction) related thing 


// Poison animation 
ORG $8193C
callHackNew(ShouldShowPoisonSplatHook) // if flag is on (eg. we'll go too fast) then skip showing the poison splat at all 
ORG $9A50AC // from this proc 9A508C 
SleepVar(40) // vanilla 50 Frames to wait during poison anim before hp drains 
ORG $9A50BC 
SleepVar(5,30) // vanilla 30 frames before hp bar disappears 
ORG $9A50CC
SleepVar(10) // vanilla 44 frames to wait before going to the next unit 
ORG $7A928 
callHackNew(PoisonHPBarHook)


ORG $9A3BBC // from 9A3BA4 // This makes vulnerary animations work 
SleepVar(15) // vanilla is 30 

// by Vesly 
// speed for battle map anim rounds 
// just from the proc MapAnimBattle 9A49FC
// vanilla is 30 30 30 10 30 
ORG $9A4A04 
SleepVar(20) // vanilla is 30 

ORG $9A4A14 
SleepVar(20) // vanilla is 30 

ORG $9A4A24 
SleepVar(20) 

ORG $9A4A34
SleepVar(10) // vanilla is 10 

ORG $9A4A44
SleepVar(20) 


ORG 0x9A3528 // speed up map battle anim start? 
SleepVar(2) // vanilla is 2 
ORG 0x9A3540
SleepVar(5) // vanilla is 5 
ORG 0x9A3568 
SleepVar(5, 15) // vanilla is 15 
ORG 0x9A360A 
BYTE 0x08	//do not change!
ORG 0x9A3628
SleepVar(2) // vanilla is 2 

ORG 0x9A47B4 // delay between rounds for map battle anims 
SleepVar(2) // vanilla is 2 
ORG 0x9A47C4
SleepVar(8) // vanilla is 8 
ORG 0x9A480C
SleepVar(20) // vanilla is 20 


// https://github.com/FireEmblemUniverse/fireemblem8u/blob/b9ad9bcafd9d4ecb7fc13cc77a464e2a82ac8338/src/popup.c#L418
// WaitForPress at 113C0 waits until the timer elapses
// for other things, it loops infinitely until input is made 

ORG $114F8 
callHackNew(GotItemPopupSpeed_Hook_1) 
ORG $1150C 
callHackNew(GotItemPopupSpeed_Hook_2) 
ORG $1166C //show "got gold" popup 
jumpToHack(GotItemPopupSpeed_Hook_3)
ORG $1167C 
callHackNew(GotItemPopupSpeed_Hook_2) 


ORG $7BCE0 // based on 7743's vulnerary speed patch 
callHackNew(VulneraryAnimationSpeed_Hook) 
SHORT 0x428c // cmp r4, r1 (7743 did this too) 
SHORT 0xda09 // bge instead of bne (7743 did this too) 




// This part is not configurable yet 
ORG $39e8C
callHackNew(ShouldAiDisplayTargetCursor_Hook) // do not display if SpeedupFlag is on 
ORG $39EA4 
callHackNew(HowManyFramesShouldAiDisplayTargetCursor_Hook)


ORG $39Eb1 
BYTE $DB // blt instead of ble 

ORG $794EE 
SHORT $0 // lsl r0, #0 (Author / Source:Gryz https://feuniverse.us/t/unit-movement-speed/920) 
ORG $794F0 
callHackNew(SpeedupMovementHook) 



POP 


#include "Speedup.lyn.event" 
#include "STAL.lyn.event" 


#ifdef POKEMBLEM
	// don't use this part unless you know what you are doing 
	PUSH 
	ORG $3D450 
	#include "AiAttemptOffensiveAction.lyn.event" 
	// 0x3D5F0 
	ASSERT $3D6AC - CurrentOffset
	MESSAGE CurrentOffset 

	ORG $39B54 // Since we added RefreshEntityBmMaps(); RenderBmMap(); and RefreshUnitSprites();
	// to CpOrderFunc_BeginDecide, we can remove them from CpDecide_Main
	SHORT $46c0 $46c0 $46c0 $46c0 $46c0 $46c0 

	POP 

	#include "CpDecide.lyn.event" 
	//#include "AiTryMoveTowards.lyn.event" 
#endif 







