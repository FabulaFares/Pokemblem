
#include "EAstdlib.event"

// No need for most people to edit this file 
#ifndef IsPointer
	#define IsPointer 0x08000000 
#endif 

#include "ModularSummon.lyn.event"
#include "AI_dependencies.lyn.event"
#include "TrainerAI.lyn.event"

#include "Extensions/ProcDefinitions.txt"

#ifndef EXPAND_AI
	#include "ExpandAI/ExpandAI.event"
#endif 
#ifndef PROC_YIELD
	#define PROC_YIELD "PROC_YEILD"
#endif 

#define POINToModularSummonTable16 "POIN ModularSummonTable; POIN ModularSummonTable; POIN ModularSummonTable; POIN ModularSummonTable; POIN ModularSummonTable; POIN ModularSummonTable; POIN ModularSummonTable; POIN ModularSummonTable; POIN ModularSummonTable; POIN ModularSummonTable; POIN ModularSummonTable; POIN ModularSummonTable; POIN ModularSummonTable; POIN ModularSummonTable; POIN ModularSummonTable; POIN ModularSummonTable"
#define POINToModularSummonTable256 "POINToModularSummonTable16; POINToModularSummonTable16; POINToModularSummonTable16; POINToModularSummonTable16; POINToModularSummonTable16; POINToModularSummonTable16; POINToModularSummonTable16; POINToModularSummonTable16; POINToModularSummonTable16; POINToModularSummonTable16; POINToModularSummonTable16; POINToModularSummonTable16; POINToModularSummonTable16; POINToModularSummonTable16; POINToModularSummonTable16; POINToModularSummonTable16"

ALIGN 4
ModularSummonChapterTable:
POINToModularSummonTable256

WORD 0 // 

// All chapters poin to the master ModularSummonTable by default 
// but we can now make other tables poin elsewhere instead 
#define MS_ChTableEntry(ChID) "PUSH; ORG ModularSummonChapterTable + (4*ChID); POIN MS_IndividualChTable; POP; ALIGN 12; MS_IndividualChTable:" 



ALIGN 4
WarpAnimationEvent:
EVBIT_MODIFY 4
// we stored a unit pointer to the memory slots queue, so now we retrive that pointer to mem slot 1 
SHORT 0x0722 0x1 // SDEQUEUE, as old EA doesn't define this 
ASMC ModularSummon_GetSummonedUnitCoords
ASMC ModularSummon_CenterCameraASMC //SHORT 0x2629 0xFFFE // CAM2 - older EA doesn't have _0x2629 defined & this can freeze the game 

ASMC WarpAnimationQueue
ASMC QueueAIForUnitInMemSlot1

SVAL sC 1 
BEQ 10 sC s5 // Use alternative animation 

CHECK_EVENTID SpeedupFlag
BNE 1 sC s0 

STAL 5
EmoticonSlotB(PokeballGraphic)
STAL 14 
EmoticonSlotB(OpenPokeballGraphic)
STAL 18

//LOAD_S2 1 // No restriction: always load 
//ENUN 
SPAWN_NPC 0xFC [-1,-1] 
AddAnimTrap(LightRuneTrapID)
STAL 22 
ASMC RemoveLightRuneASMC|1

DISA 0xFC 
GOTO 20 
LABEL 10 
SPAWN_NPC 0xFC [-1,-1] 
CHECK_EVENTID SpeedupFlag
BNE 11 sC s0 
//STAL 22 
LABEL 11
DISA 0xFC 

LABEL 20 
ASMC 0x8026689 //SMS_Init - refresh SMS in case we've gone overboard 
CHECK_EVENTID SpeedupFlag
BNE 99 sC s0 
STAL 5


EVBIT_MODIFY 0
GOTO 99 

LABEL 1 // Fast version 
SPAWN_NPC 0xFC [-1,-1] 
AddAnimTrap(LightRuneTrapID)
STAL 7 
ASMC RemoveLightRuneASMC|1

DISA 0xFC 
LABEL 20 
ASMC 0x8026689 //SMS_Init - refresh SMS in case we've gone overboard 

LABEL 99 
NoFade 
ENDA 





ModularSummon_RestoreCameraEvent: // This is an event so that it gets queued after X number of warp animation events, instead of happening beforehand 
ASMC ModularSummon_RestoreCameraASMC // Move back to active unit using CenterCameraOntoPosition
ENUT TrainerBattleActiveFlag 
NoFade 
ENDA 

ALIGN 4
WaitUntilAIMovesProc:
PROC_YIELD // Buffer.
PROC_SET_NAME(WaitUntilAIMovesProcName)
PROC_SLEEP(0)
PROC_LOOP_ROUTINE(WaitUntilAIMoves)

PROC_CALL_ROUTINE(TrainerSpotsYouFunction)

//PROC_CALL_ROUTINE(ModularSummonEffect)
PROC_END


WaitUntilAIMovesProcName:
String("CustomAIPausedBecauseUnitIsMoving") ; BYTE 0
ALIGN 4



