#ifndef TRAP_REWORK_INSTALLED
	#define TRAP_REWORK_INSTALLED


	
	//vanilla trap ID defs
	#define BallistaTrapID 1
	#define AttackableTerrainTrapID 2
	#define MapChangesTrapID 3
	#define FireTrapID 4
	#define GasTrapID 5
	#define UnusedMapChangesTrapID 6
	#define ArrowTrapID 7
	#define InstantFireTrapID 8
	#define PossiblyUnusedTrapID 9
	#define TorchStaffTrapID 10
	#define MineTrapID 11
	#define GorgonEggTrapID 12
	#define LightRuneTrapID 13
	//#define HealTileTrapID 14 

	#define RedPokeballItemID 16	//respawnable item 
	#define GoldPokeballItemID 17	//non-respawnable item
	#define HiddenPokeballItemID 18	//invisible item 
	
	//#define StatAccessoryID 19 
	//#define SkillAccessoryID 20 
	
	#define CoinsTrapID 21 // 
ALIGN 4 
CoinsTrapID_Link:
WORD CoinsTrapID
	
	
	#define OpenPokeballItemID 89	//blocks but cannot interact 
	
	#define ObstacleID 48 
	
	#define SaveTrapID 58 //0x3a
	#define SaveCostID 59
	#define EnterID 60
	#define Exit2ID 61

	
	#define DisplayOnlyID 64 
	#define FlowerTrapID 	65
	
	
			// 0x1A flowers 


	#define CutBushTrapID 32		//Cut
	#define RockSmashTrapID 33		//Smash
	#define StrengthBoulderTrapID 34	//Push
	#define BreakableFloorID 35	//Step
	#define HoleID 36 		//Jump
	#define BoulderReceptacleID 37	//place boulder into
	#define SpawnGenericID 38	//Yell-into
	#define FoodID 39		//Eat
	#define BlueWaitID 40		//Wait
	
	#define GenericID 48		//Interact
	#define NPCTalkID 49		//Talk




	//#define Placeholder21ID 21	//respawnable item 
	#define Placeholder22ID 22	//respawnable item 
	#define Placeholder23ID 23	//respawnable item 
	#define Placeholder24ID 24	//respawnable item 
	#define Placeholder25ID 25	//respawnable item 
	

	#define Placeholder26ID 26	//respawnable item 
	
	#define Placeholder27ID 27	//respawnable item 
	#define Placeholder28ID 28	//respawnable item 
	#define Placeholder29ID 29	//respawnable item 
	#define Placeholder30ID 30	//respawnable item 
	#define Placeholder31ID 31	//respawnable item 

	#define Placeholder41ID 41	//respawnable item // used 
	#define Placeholder42ID 42	//respawnable item // used 
	#define Placeholder43ID 43	//respawnable item 
	#define Placeholder44ID 44	//respawnable item 
	#define Placeholder45ID 45	//respawnable item 
	#define Placeholder46ID 46	//respawnable item 
	#define Placeholder47ID 47	//respawnable item 

	
	#define LightRuneTrapPaletteWord 0xFFFFB080
	#define PlayerTrapPaletteWord 0xFFFFC080
	#define EnemyTrapPaletteWord 0xFFFFD080
	#define NPCTrapPaletteWord 0xFFFFE080
	#define GreyTrapPaletteWord 0xFFFFF080
	#define GrayTrapPaletteWord GreyTrapPaletteWord //language is dumb
	
	#define ExampleMapSpriteTrapID 0x10
	#define ExampleMapSpriteID 0x66
	
	
	#include "TrapRework_Internal.event"
	
	
	//macro for setting event initializers
	#define SetTrapEventInit(trapID,ptr) "PUSH; ORG TrapInitFromEventsJumpTable+(4*(trapID-1)); POIN ptr; POP"
	#define SetTrapInit(trapID,ptr) "PUSH; ORG TrapInitFromEventsFunctionTable+(4*(trapID-1)); POIN ptr; POP"
	
	SetTrapEventInit(BallistaTrapID,$37894)
	SetTrapEventInit(AttackableTerrainTrapID,$37900)
	SetTrapEventInit(MapChangesTrapID,$37900)
	SetTrapEventInit(FireTrapID,$378A0)
	SetTrapEventInit(GasTrapID,$378AE)
	SetTrapEventInit(UnusedMapChangesTrapID,0)
	SetTrapEventInit(ArrowTrapID,$378E2)
	SetTrapEventInit(InstantFireTrapID,$378C0)
	SetTrapEventInit(PossiblyUnusedTrapID,$378CA)
	SetTrapEventInit(TorchStaffTrapID,$37900)
	SetTrapEventInit(MineTrapID,$378D6)
	SetTrapEventInit(GorgonEggTrapID,$378EC)
	SetTrapEventInit(LightRuneTrapID,0)





	
	#define SetTrapMapSprite(trapID,mapSpriteID) "PUSH; ORG TrapMapSpriteTable+(trapID-1); BYTE mapSpriteID; POP"

	
	SetTrapMapSprite(BallistaTrapID,0) //ballista is a special case handled elsewhere
	SetTrapMapSprite(AttackableTerrainTrapID,0)
	SetTrapMapSprite(MapChangesTrapID,0)
	SetTrapMapSprite(FireTrapID,0)
	SetTrapMapSprite(GasTrapID,0)
	SetTrapMapSprite(UnusedMapChangesTrapID,0)
	SetTrapMapSprite(ArrowTrapID,0)
	SetTrapMapSprite(InstantFireTrapID,0)
	SetTrapMapSprite(PossiblyUnusedTrapID,0)
	SetTrapMapSprite(TorchStaffTrapID,0)
	SetTrapMapSprite(MineTrapID,0)
	SetTrapMapSprite(GorgonEggTrapID,0)
	SetTrapMapSprite(LightRuneTrapID,0x66) //light rune map sprite

	SetTrapMapSprite(SaveTrapID,SavePointSMS)
	SetTrapMapSprite(SaveCostID,BlankSMS)
	SetTrapMapSprite(EnterID,BlankSMS)
	SetTrapMapSprite(Exit2ID,BlankSMS)
	
	SetTrapMapSprite(RedPokeballItemID,RedPokeballSMS)
	SetTrapMapSprite(GoldPokeballItemID,GoldPokeballSMS)
	SetTrapMapSprite(HiddenPokeballItemID,GoldPokeballSMS)
	SetTrapMapSprite(OpenPokeballItemID,OpenBallSMS)

	SetTrapMapSprite(CutBushTrapID,CutBushSMS)
	SetTrapMapSprite(RockSmashTrapID,RockSmashSMS)
	SetTrapMapSprite(StrengthBoulderTrapID,StrengthBoulderSMS)
	SetTrapMapSprite(BreakableFloorID,0x72)
	SetTrapMapSprite(HoleID,BlankSMS)
	SetTrapMapSprite(BoulderReceptacleID,0x74)

	SetTrapMapSprite(FoodID,0x75)
	SetTrapMapSprite(BlueWaitID,0x76)
	SetTrapMapSprite(GenericID,0x6A)
	SetTrapMapSprite(NPCTalkID,0x6B) //rocket 


	
	
	SetTrapMapSprite(CoinsTrapID,CoinsSMS) //coins
	SetTrapMapSprite(Placeholder22ID,0x6F) //placeholder
	SetTrapMapSprite(Placeholder23ID,0x77)
	SetTrapMapSprite(Placeholder24ID,0x78)
	SetTrapMapSprite(Placeholder25ID,0x79)
	SetTrapMapSprite(Placeholder26ID,0x7A) //0x1A flowers (display only)
	

	
	SetTrapMapSprite(Placeholder27ID,0x7B)
	SetTrapMapSprite(Placeholder28ID,0x7C)
	SetTrapMapSprite(Placeholder29ID,0x7D)
	SetTrapMapSprite(Placeholder30ID,0x7E)
	SetTrapMapSprite(Placeholder31ID,0x7F)
	SetTrapMapSprite(Placeholder41ID,0x70)
	SetTrapMapSprite(Placeholder42ID,0x71)
	SetTrapMapSprite(Placeholder43ID,0x72)
	SetTrapMapSprite(Placeholder44ID,0x73)
	SetTrapMapSprite(Placeholder45ID,0x74)
	SetTrapMapSprite(Placeholder46ID,0x75)
	SetTrapMapSprite(Placeholder47ID,0x76)

	SetTrapMapSprite(51,0x68) //save point
	SetTrapMapSprite(52,0x70) //
	SetTrapMapSprite(53,0x71)
	SetTrapMapSprite(54,0x72)
	SetTrapMapSprite(55,0x73)
	SetTrapMapSprite(56,0x74)
	SetTrapMapSprite(57,0x75)

	SetTrapMapSprite(62,0x7A)
	SetTrapMapSprite(63,0x7B)
	SetTrapMapSprite(64,0x7A)
	SetTrapMapSprite(65,0x7B)



	//Macro for setting unique cases on trap map sprites
	#define SetTrapMapSpriteFunc(trapID,ptr) "PUSH; ORG (TrapMapSpriteFuncTable+((trapID-1)*4)); POIN ptr; POP"
	//doesn't need to be one for ballistae, they're handled somewhere else
	//THIS IS CURRENTLY UNIMPLEMENTED
	

	#define SetTrapMapSpritePalette(trapID,paletteWord) "PUSH; ORG TrapMapSpritePaletteTable+(4*(trapID-1)); WORD paletteWord; POP"
	
	SetTrapMapSpritePalette(LightRuneTrapID,LightRuneTrapPaletteWord)
	
	
	

	
	SetTrapMapSpritePalette(CutBushTrapID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(RockSmashTrapID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(StrengthBoulderTrapID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(BreakableFloorID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(HoleID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(BoulderReceptacleID,NPCTrapPaletteWord)

	SetTrapMapSpritePalette(FoodID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(BlueWaitID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(GenericID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(NPCTalkID,NPCTrapPaletteWord)
	
	SetTrapMapSpritePalette(HiddenPokeballItemID,NPCTrapPaletteWord)


	
	SetTrapMapSpritePalette(CoinsTrapID,NPCTrapPaletteWord)
	
	SetTrapMapSpritePalette(Placeholder22ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder23ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder24ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder25ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder26ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder27ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder28ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder29ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder30ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder31ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder41ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder42ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder43ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder44ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder45ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder46ID,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(Placeholder47ID,NPCTrapPaletteWord)
	
	SetTrapMapSpritePalette(51,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(52,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(53,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(54,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(55,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(56,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(57,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(58,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(59,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(60,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(61,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(62,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(63,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(64,NPCTrapPaletteWord)
	SetTrapMapSpritePalette(65,NPCTrapPaletteWord)
	
	

	//These 3 macros are all you need to define a new trap w/ map sprite
	SetTrapEventInit(ExampleMapSpriteTrapID,TrapRework_GenericInitializer)
	SetTrapMapSprite(ExampleMapSpriteTrapID,ExampleMapSpriteID) //thief map sprite
	SetTrapMapSpritePalette(ExampleMapSpriteTrapID,NPCTrapPaletteWord)
	
	SetTrapMapSpritePalette(OpenPokeballItemID,NPCTrapPaletteWord)
	SetTrapEventInit(OpenPokeballItemID,TrapRework_GenericInitializer)
	
	
	//Use this macro in your events to place a map sprite trap
	#define MapSpriteTrap(trapID,x,y) "BYTE trapID x y 0 0 0"	
	
	//Macros for checks/actions involving traps
	#define AddTrap(trapID,x,y) "SVAL 1 trapID; SVAL 0xB (x|(y<<16)); ASMC AddTrapASMC"
	#define AddTrap(trapID) "SVAL 1 trapID; ASMC AddTrapASMC"
	#define AddAnimTrap(trapID) "SVAL 1 trapID; ASMC AnimLightRuneASMC" //; ASMC RemoveTrapAtCoordsASMC"
	#define AddTrapExt(trapID, x, y, ext1, ext2, ext3, ext4, ext5) "SVAL s1 trapID; SVAL 0xB (x|(y<<16)); SVAL s2 ext1; SVAL s3 ext2; SVAL s4 ext3; SVAL s5 ext4; SVAL s6 ext5; ASMC AddTrapExtASMC"  
	#define AddTrapExt(trapID, x, y, ext1, ext2, ext3, ext4) "SVAL s1 trapID; SVAL 0xB (x|(y<<16)); SVAL s2 ext1; SVAL s3 ext2; SVAL s4 ext3; SVAL s5 ext4; SVAL s6 ext5; ASMC AddTrapExtASMC"  
	#define AddTrapExt(trapID, x, y, ext1, ext2, ext3) "SVAL s1 trapID; SVAL 0xB (x|(y<<16)); SVAL s2 ext1; SVAL s3 ext2; SVAL s4 ext3; SVAL s5 0; SVAL s6 0; ASMC AddTrapExtASMC"  
	
	
	//BYTE $40 0D 0D $01 // $01 is animated 
	

//400D0DUU{$L1:AddTrap.dmp}	Add Trap-LightRune[XX:MAPX:X][YY:MAPY:Y][UU:BOOL:IsAnime]	{MAP}
	
	
	
	
	#define RemoveTrapAtCoords(x,y) "SVAL 0xB (x|(y<<16)); ASMC RemoveTrapAtCoordsASMC"
	#define RemoveTrap(x,y) "SVAL 0xB (x|(y<<16)); ASMC RemoveTrapAtCoordsASMC"
	
	#define RemoveTrap "ASMC RemoveTrapAtCoordsASMC"
	#define GetTrapIDAt(x,y) "SVAL 0xB (x|(y<<16)); ASMC GetTrapIDAtASMC"
	#define IsTrapAtCoordMatchingType(x, y, ID) "SVAL 0xB (x|(y<<16)); SVAL s1 ID; ASMC ASMC_IsTrapAtCoordMatchingType"
	#define GetTrapExt1At(X,y) "SVAL 0xB (x|(y<<16)); ASMC GetTrapExt1AtASMC"
	#define RemoveMatchingTrapTypeAtCoord(x, y, ID) "SVAL 0xB (x|(y<<16)); SVAL s1 ID; ASMC ASMC_RemoveMatchingTrapTypeAtCoord"
	
	//Macro for setting traps as light sources (uses ext1 for vision range)
	#define SetLightSourceTrap(trapID) "PUSH; ORG (TrapFogLightSourceTable+trapID); BYTE 1; POP"
	
	SetLightSourceTrap(TorchStaffTrapID)
	
	//Macro for setting traps as impassable, like light runes
	#define SetImpassableTrap(trapID) "PUSH; ORG (TrapLightRuneImpassableTable+trapID); BYTE 0x19; POP" // @ terrain type Fence
	#define SetExpensiveTerrainForAI(trapID) "PUSH; ORG (TrapLightRuneImpassableTable+trapID); BYTE 0x17; POP" // terrain type Ground2 
	#define SetTerrainForTrap(trapID, terrain) "PUSH; ORG (TrapLightRuneImpassableTable+trapID); BYTE terrain; POP" 
	// costs 3 for NPCs/Enemies but 1 for players. This discourages AI from walking over these tiles. 
	

	SetImpassableTrap(LightRuneTrapID)
	
	SetImpassableTrap(CutBushTrapID)
	SetImpassableTrap(RockSmashTrapID)
	SetImpassableTrap(StrengthBoulderTrapID)
	SetImpassableTrap(BreakableFloorID)
	//SetImpassableTrap(HoleID)
	//SetImpassableTrap(BoulderReceptacleID)

	SetImpassableTrap(FoodID)
	SetImpassableTrap(BlueWaitID)
	SetImpassableTrap(GenericID)
	SetImpassableTrap(NPCTalkID)


	//SetImpassableTrap(Placeholder21ID)
	SetImpassableTrap(Placeholder22ID)
	SetImpassableTrap(Placeholder23ID)
	SetImpassableTrap(Placeholder24ID)
	SetImpassableTrap(Placeholder25ID)
	SetImpassableTrap(Placeholder26ID)
	SetImpassableTrap(Placeholder27ID)
	//SetImpassableTrap(Placeholder28ID)
	//SetImpassableTrap(Placeholder29ID)
	//SetImpassableTrap(Placeholder30ID)
	//SetImpassableTrap(Placeholder31ID)
	SetImpassableTrap(Placeholder41ID)
	SetImpassableTrap(Placeholder42ID)
	SetImpassableTrap(Placeholder43ID)
	SetImpassableTrap(Placeholder44ID)
	SetImpassableTrap(Placeholder45ID)
	SetImpassableTrap(Placeholder46ID)
	SetImpassableTrap(Placeholder47ID)
	SetImpassableTrap(48)
	SetImpassableTrap(49)
	SetImpassableTrap(50)
	SetImpassableTrap(51)
	SetImpassableTrap(52)
	SetImpassableTrap(53)
	SetImpassableTrap(54)
	SetImpassableTrap(55)
	SetImpassableTrap(56)
	SetImpassableTrap(57)
	SetImpassableTrap(59)
	SetImpassableTrap(60)
	SetImpassableTrap(61)




	//Macro for settings pairs of terrain IDs & char IDs for breakable terrain
	#define TrapBreakableTerrain(terrainID,charID,maxHP) "BYTE (terrainID-1) charID maxHP 0"
	#define TrapBreakableTerrainListEnd "WORD 0"

	//List for things that should be breakable
	ALIGN 4
	TrapBreakableTerrainList: 
	TrapBreakableTerrain(0x34,0xFF,20) 		//Snag
	TrapBreakableTerrain(0x1C,0xFE,0xFF) 	//Wall
	//TrapBreakableTerrain(0x1A,0xFC,15) 		//Fence
	TrapBreakableTerrainListEnd
	

	//Example usages
	#include "Modules/DragonVeins/DragonVeins.event"
	#include "Modules/HealTiles/HealTiles.event"
	SetTerrainForTrap(HealTileTrapID, HealingGround)
	
	#include "Modules/TelliusTorches/TelliusTorches.event"
	#include "Modules/Pokemblem/PokemblemTraps.event"
	

	
#endif // TRAP_REWORK_INSTALLED
